generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          String       @id
  jobId       String
  type        ActivityType
  userId      String
  description String
  metadata    Json?
  createdAt   DateTime     @default(now())
  Job         Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  User        User         @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([jobId])
  @@index([type])
}

model Attachment {
  id        String   @id
  jobId     String
  filename  String
  url       String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())
  Job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model Comment {
  id        String   @id
  content   String
  jobId     String
  userId    String
  mentions  String[]
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])

  @@index([jobId])
  @@index([userId])
}

model Department {
  id                                 String   @id
  name                               String
  managerId                          String?  @unique
  createdAt                          DateTime @default(now())
  updatedAt                          DateTime
  User_Department_managerIdToUser    User?    @relation("Department_managerIdToUser", fields: [managerId], references: [id])
  Job                                Job[]
  User_User_departmentIdToDepartment User[]   @relation("User_departmentIdToDepartment")
}

model Job {
  id                          String         @id
  jobId                       String         @unique
  clientName                  String
  title                       String
  description                 String?
  status                      JobStatus      @default(RFI_EMAIL_TO_CLIENT_SENT)
  priority                    String?
  isUrgent                    Boolean        @default(false)
  isLate                      Boolean        @default(false)
  awaitingClientReply         Boolean        @default(false)
  assignedToId                String
  assignedById                String
  managerId                   String?
  supervisorId                String?
  departmentId                String?
  serviceTypes                ServiceType[]
  progress                    Int            @default(0)
  startedAt                   DateTime?
  dueDate                     DateTime?
  completedAt                 DateTime?
  tags                        String[]
  createdAt                   DateTime       @default(now())
  updatedAt                   DateTime
  lastActivityAt              DateTime       @default(now())
  lastReminderSentAt          DateTime?
  reminderSnoozeUntil         DateTime?
  activities                  Activity[]
  Attachment                  Attachment[]
  Comment                     Comment[]
  User_Job_assignedByIdToUser User           @relation("Job_assignedByIdToUser", fields: [assignedById], references: [id])
  User_Job_assignedToIdToUser User           @relation("Job_assignedToIdToUser", fields: [assignedToId], references: [id])
  Department                  Department?    @relation(fields: [departmentId], references: [id])
  User_Job_managerIdToUser    User?          @relation("Job_managerIdToUser", fields: [managerId], references: [id])
  User_Job_supervisorIdToUser User?          @relation("Job_supervisorIdToUser", fields: [supervisorId], references: [id])
  StatusUpdate                StatusUpdate[]

  @@index([assignedById])
  @@index([assignedToId])
  @@index([departmentId])
  @@index([dueDate])
  @@index([jobId])
  @@index([lastActivityAt])
  @@index([managerId])
  @@index([status])
  @@index([supervisorId])
}

model Notification {
  id        String           @id
  userId    String
  type      NotificationType
  title     String
  content   String
  jobId     String?
  commentId String?
  actionUrl String?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([isRead])
  @@index([userId])
}

model StatusUpdate {
  id        String   @id
  jobId     String
  userId    String
  action    String
  oldValue  String?
  newValue  String?
  comment   String?
  timestamp DateTime @default(now())
  Job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])

  @@index([jobId])
  @@index([userId])
}

model Task {
  id               String     @id
  title            String
  description      String?
  clientName       String?
  status           TaskStatus @default(PENDING)
  userId           String
  startedAt        DateTime?
  completedAt      DateTime?
  timeSpentMinutes Int?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime
  User             User       @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([clientName])
}

model User {
  id                                       String         @id
  name                                     String
  email                                    String         @unique
  password                                 String
  role                                     UserRole       @default(STAFF)
  departmentId                             String?
  isActive                                 Boolean        @default(true)
  avatar                                   String?
  createdAt                                DateTime       @default(now())
  updatedAt                                DateTime
  activities                               Activity[]
  Comment                                  Comment[]
  Department_Department_managerIdToUser    Department?    @relation("Department_managerIdToUser")
  Job_Job_assignedByIdToUser               Job[]          @relation("Job_assignedByIdToUser")
  Job_Job_assignedToIdToUser               Job[]          @relation("Job_assignedToIdToUser")
  Job_Job_managerIdToUser                  Job[]          @relation("Job_managerIdToUser")
  Job_Job_supervisorIdToUser               Job[]          @relation("Job_supervisorIdToUser")
  Notification                             Notification[]
  StatusUpdate                             StatusUpdate[]
  Task                                     Task[]         @relation("UserTasks")
  Department_User_departmentIdToDepartment Department?    @relation("User_departmentIdToDepartment", fields: [departmentId], references: [id])

  @@index([departmentId])
  @@index([email])
}

enum ActivityType {
  CREATED
  ASSIGNED
  REASSIGNED
  STATUS_CHANGED
  COMMENT_ADDED
  FILE_UPLOADED
  COMPLETED
  CANCELLED
  UPDATED
  SNOOZED
}

enum JobStatus {
  RFI_EMAIL_TO_CLIENT_SENT
  INFO_SENT_TO_LAHORE_JOB_STARTED
  MISSING_INFO_CHASE_CLIENT
  LAHORE_TO_PROCEED_CLIENT_INFO_COMPLETE
  FOR_REVIEW_WITH_JACK
  COMPLETED
  CANCELLED
}

enum NotificationType {
  JOB_ASSIGNED
  JOB_REASSIGNED
  JOB_COMMENT
  JOB_STATUS_CHANGED
  JOB_COMPLETED
  JOB_OVERDUE
  JOB_INACTIVE_24H
  JOB_INACTIVE_48H
  MENTION
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ServiceType {
  BOOKKEEPING
  VAT
  CESSATION_OF_ACCOUNT
  FINANCIAL_STATEMENTS
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum UserRole {
  ADMIN
  MANAGER
  SUPERVISOR
  STAFF
}
