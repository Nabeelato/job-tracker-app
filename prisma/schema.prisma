generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  SUPERVISOR
  STAFF
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  ON_HOLD
  AWAITING_APPROVAL
  PENDING_COMPLETION
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ServiceType {
  BOOKKEEPING
  VAT
  AUDIT
  FINANCIAL_STATEMENTS
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(STAFF)
  departmentId  String?
  isActive      Boolean   @default(true)
  avatar        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  department         Department?      @relation(fields: [departmentId], references: [id])
  managedDepartment  Department?      @relation("DepartmentManager")
  assignedJobs       Job[]            @relation("AssignedJobs")
  createdJobs        Job[]            @relation("CreatedJobs")
  managedJobs        Job[]            @relation("ManagedJobs")
  supervisedJobs     Job[]            @relation("SupervisedJobs")
  comments           Comment[]
  statusUpdates      StatusUpdate[]
  notifications      Notification[]

  @@index([email])
  @@index([departmentId])
}

model Department {
  id        String   @id @default(cuid())
  name      String
  managerId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  manager   User?  @relation("DepartmentManager", fields: [managerId], references: [id])
  users     User[]
  jobs      Job[]
}

model Job {
  id           String      @id @default(cuid())
  jobId        String      @unique
  clientName   String
  title        String
  description  String?     @db.Text
  status       JobStatus   @default(PENDING)
  priority     Priority    @default(NORMAL)
  isUrgent     Boolean     @default(false)
  isLate       Boolean     @default(false)
  assignedToId String
  assignedById String
  managerId    String?
  supervisorId String?
  departmentId String?
  serviceTypes ServiceType[]
  progress     Int         @default(0) // Progress percentage 0-100
  startedAt    DateTime?
  dueDate      DateTime?
  completedAt  DateTime?
  tags         String[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  assignedTo    User            @relation("AssignedJobs", fields: [assignedToId], references: [id])
  assignedBy    User            @relation("CreatedJobs", fields: [assignedById], references: [id])
  manager       User?           @relation("ManagedJobs", fields: [managerId], references: [id])
  supervisor    User?           @relation("SupervisedJobs", fields: [supervisorId], references: [id])
  department    Department?     @relation(fields: [departmentId], references: [id])
  comments      Comment[]
  statusUpdates StatusUpdate[]
  attachments   Attachment[]

  @@index([jobId])
  @@index([assignedToId])
  @@index([assignedById])
  @@index([managerId])
  @@index([supervisorId])
  @@index([departmentId])
  @@index([status])
  @@index([dueDate])
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  jobId       String
  userId      String
  mentions    String[] // Array of user IDs mentioned in comment
  isEdited    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([jobId])
  @@index([userId])
}

model StatusUpdate {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  action    String
  oldValue  String?
  newValue  String?
  comment   String?  @db.Text // Optional comment explaining the change
  timestamp DateTime @default(now())

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([jobId])
  @@index([userId])
}

model Attachment {
  id        String   @id @default(cuid())
  jobId     String
  filename  String
  url       String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String   // JOB_ASSIGNED, COMMENT_MENTION, STATUS_CHANGE, DUE_DATE_REMINDER, etc.
  title      String
  content    String   @db.Text
  jobId      String?
  commentId  String?  // For mention notifications
  actionUrl  String?  // Deep link to relevant page
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}
